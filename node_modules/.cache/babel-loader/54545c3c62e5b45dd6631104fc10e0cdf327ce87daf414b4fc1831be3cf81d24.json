{"ast":null,"code":"import { ListActionTypes } from './listActions.types';\n/**\n * Looks up the next valid item to highlight within the list.\n *\n * @param currentIndex The index of the start of the search.\n * @param lookupDirection Whether to look for the next or previous item.\n * @param items The array of items to search.\n * @param includeDisabledItems Whether to include disabled items in the search.\n * @param isItemDisabled A function that determines whether an item is disabled.\n * @param wrapAround Whether to wrap around the list when searching.\n * @returns The index of the next valid item to highlight or -1 if no valid item is found.\n */\nfunction findValidItemToHighlight(currentIndex, lookupDirection, items, includeDisabledItems, isItemDisabled, wrapAround) {\n  if (items.length === 0 || !includeDisabledItems && items.every((item, itemIndex) => isItemDisabled(item, itemIndex))) {\n    return -1;\n  }\n  let nextFocus = currentIndex;\n  for (;;) {\n    // No valid items found\n    if (!wrapAround && lookupDirection === 'next' && nextFocus === items.length || !wrapAround && lookupDirection === 'previous' && nextFocus === -1) {\n      return -1;\n    }\n    const nextFocusDisabled = includeDisabledItems ? false : isItemDisabled(items[nextFocus], nextFocus);\n    if (nextFocusDisabled) {\n      nextFocus += lookupDirection === 'next' ? 1 : -1;\n      if (wrapAround) {\n        nextFocus = (nextFocus + items.length) % items.length;\n      }\n    } else {\n      return nextFocus;\n    }\n  }\n}\n\n/**\n * Gets the next item to highlight based on the current highlighted item and the search direction.\n *\n * @param previouslyHighlightedValue The item from which to start the search for the next candidate.\n * @param offset The offset from the previously highlighted item to search for the next candidate or a special named value ('reset', 'start', 'end').\n * @param context The list action context.\n *\n * @returns The next item to highlight or null if no item is valid.\n */\nexport function moveHighlight(previouslyHighlightedValue, offset, context) {\n  const {\n    items,\n    isItemDisabled,\n    disableListWrap,\n    disabledItemsFocusable,\n    itemComparer,\n    focusManagement\n  } = context;\n\n  // TODO: make this configurable\n  // The always should be an item highlighted when focus is managed by the DOM\n  // so that it's accessible by the `tab` key.\n  const defaultHighlightedIndex = focusManagement === 'DOM' ? 0 : -1;\n  const maxIndex = items.length - 1;\n  const previouslyHighlightedIndex = previouslyHighlightedValue == null ? -1 : items.findIndex(item => itemComparer(item, previouslyHighlightedValue));\n  let nextIndexCandidate;\n  let lookupDirection;\n  let wrapAround = !disableListWrap;\n  switch (offset) {\n    case 'reset':\n      if (defaultHighlightedIndex === -1) {\n        return null;\n      }\n      nextIndexCandidate = 0;\n      lookupDirection = 'next';\n      wrapAround = false;\n      break;\n    case 'start':\n      nextIndexCandidate = 0;\n      lookupDirection = 'next';\n      wrapAround = false;\n      break;\n    case 'end':\n      nextIndexCandidate = maxIndex;\n      lookupDirection = 'previous';\n      wrapAround = false;\n      break;\n    default:\n      {\n        const newIndex = previouslyHighlightedIndex + offset;\n        if (newIndex < 0) {\n          if (!wrapAround && previouslyHighlightedIndex !== -1 || Math.abs(offset) > 1) {\n            nextIndexCandidate = 0;\n            lookupDirection = 'next';\n          } else {\n            nextIndexCandidate = maxIndex;\n            lookupDirection = 'previous';\n          }\n        } else if (newIndex > maxIndex) {\n          if (!wrapAround || Math.abs(offset) > 1) {\n            nextIndexCandidate = maxIndex;\n            lookupDirection = 'previous';\n          } else {\n            nextIndexCandidate = 0;\n            lookupDirection = 'next';\n          }\n        } else {\n          nextIndexCandidate = newIndex;\n          lookupDirection = offset >= 0 ? 'next' : 'previous';\n        }\n      }\n  }\n  const nextIndex = findValidItemToHighlight(nextIndexCandidate, lookupDirection, items, disabledItemsFocusable, isItemDisabled, wrapAround);\n\n  // If there are no valid items to highlight, return the previously highlighted item (if it's still valid).\n  if (nextIndex === -1 && previouslyHighlightedValue !== null && !isItemDisabled(previouslyHighlightedValue, previouslyHighlightedIndex)) {\n    return previouslyHighlightedValue;\n  }\n  return items[nextIndex] ?? null;\n}\n\n/**\n * Toggles the selection of an item.\n *\n * @param item Item to toggle.\n * @param selectedValues Already selected items.\n * @param selectionMode The number of items that can be simultanously selected.\n * @param itemComparer A custom item comparer function.\n *\n * @returns The new array of selected items.\n */\nexport function toggleSelection(item, selectedValues, selectionMode, itemComparer) {\n  if (selectionMode === 'none') {\n    return [];\n  }\n  if (selectionMode === 'single') {\n    // if the item to select has already been selected, return the original array\n    if (itemComparer(selectedValues[0], item)) {\n      return selectedValues;\n    }\n    return [item];\n  }\n\n  // The toggled item is selected; remove it from the selection.\n  if (selectedValues.some(sv => itemComparer(sv, item))) {\n    return selectedValues.filter(sv => !itemComparer(sv, item));\n  }\n\n  // The toggled item is not selected - add it to the selection.\n  return [...selectedValues, item];\n}\n\n/**\n * Handles item selection in a list.\n *\n * @param item - The item to be selected.\n * @param state - The current state of the list.\n * @param context - The context of the list action.\n * @returns The new state of the list after the item has been selected, or the original state if the item is disabled.\n */\nexport function handleItemSelection(item, state, context) {\n  const {\n    itemComparer,\n    isItemDisabled,\n    selectionMode,\n    items\n  } = context;\n  const {\n    selectedValues\n  } = state;\n  const itemIndex = items.findIndex(i => itemComparer(item, i));\n  if (isItemDisabled(item, itemIndex)) {\n    return state;\n  }\n\n  // if the item is already selected, remove it from the selection, otherwise add it\n  const newSelectedValues = toggleSelection(item, selectedValues, selectionMode, itemComparer);\n  return {\n    ...state,\n    selectedValues: newSelectedValues,\n    highlightedValue: item\n  };\n}\nfunction handleKeyDown(key, state, context) {\n  const previouslySelectedValue = state.highlightedValue;\n  const {\n    orientation,\n    pageSize\n  } = context;\n  switch (key) {\n    case 'Home':\n      return {\n        ...state,\n        highlightedValue: moveHighlight(previouslySelectedValue, 'start', context)\n      };\n    case 'End':\n      return {\n        ...state,\n        highlightedValue: moveHighlight(previouslySelectedValue, 'end', context)\n      };\n    case 'PageUp':\n      return {\n        ...state,\n        highlightedValue: moveHighlight(previouslySelectedValue, -pageSize, context)\n      };\n    case 'PageDown':\n      return {\n        ...state,\n        highlightedValue: moveHighlight(previouslySelectedValue, pageSize, context)\n      };\n    case 'ArrowUp':\n      if (orientation !== 'vertical') {\n        break;\n      }\n      return {\n        ...state,\n        highlightedValue: moveHighlight(previouslySelectedValue, -1, context)\n      };\n    case 'ArrowDown':\n      if (orientation !== 'vertical') {\n        break;\n      }\n      return {\n        ...state,\n        highlightedValue: moveHighlight(previouslySelectedValue, 1, context)\n      };\n    case 'ArrowLeft':\n      {\n        if (orientation === 'vertical') {\n          break;\n        }\n        const offset = orientation === 'horizontal-ltr' ? -1 : 1;\n        return {\n          ...state,\n          highlightedValue: moveHighlight(previouslySelectedValue, offset, context)\n        };\n      }\n    case 'ArrowRight':\n      {\n        if (orientation === 'vertical') {\n          break;\n        }\n        const offset = orientation === 'horizontal-ltr' ? 1 : -1;\n        return {\n          ...state,\n          highlightedValue: moveHighlight(previouslySelectedValue, offset, context)\n        };\n      }\n    case 'Enter':\n    case ' ':\n      if (state.highlightedValue === null) {\n        return state;\n      }\n      return handleItemSelection(state.highlightedValue, state, context);\n    default:\n      break;\n  }\n  return state;\n}\nfunction handleBlur(state, context) {\n  if (context.focusManagement === 'DOM') {\n    return state;\n  }\n  return {\n    ...state,\n    highlightedValue: null\n  };\n}\nfunction textCriteriaMatches(nextFocus, searchString, stringifyItem) {\n  const text = stringifyItem(nextFocus)?.trim().toLowerCase();\n  if (!text || text.length === 0) {\n    // Make item not navigable if stringification fails or results in empty string.\n    return false;\n  }\n  return text.startsWith(searchString);\n}\nfunction handleTextNavigation(state, searchString, context) {\n  const {\n    items,\n    isItemDisabled,\n    disabledItemsFocusable,\n    getItemAsString\n  } = context;\n  const startWithCurrentItem = searchString.length > 1;\n  let nextItem = startWithCurrentItem ? state.highlightedValue : moveHighlight(state.highlightedValue, 1, context);\n  for (let index = 0; index < items.length; index += 1) {\n    // Return un-mutated state if looped back to the currently highlighted value\n    if (!nextItem || !startWithCurrentItem && state.highlightedValue === nextItem) {\n      return state;\n    }\n    if (textCriteriaMatches(nextItem, searchString, getItemAsString) && (!isItemDisabled(nextItem, items.indexOf(nextItem)) || disabledItemsFocusable)) {\n      // The nextItem is the element to be highlighted\n      return {\n        ...state,\n        highlightedValue: nextItem\n      };\n    }\n    // Move to the next element.\n    nextItem = moveHighlight(nextItem, 1, context);\n  }\n\n  // No item matches the text search criteria\n  return state;\n}\nfunction handleItemsChange(items, previousItems, state, context) {\n  const {\n    itemComparer,\n    focusManagement\n  } = context;\n  let newHighlightedValue = null;\n  if (state.highlightedValue != null) {\n    newHighlightedValue = items.find(item => itemComparer(item, state.highlightedValue)) ?? null;\n  } else if (focusManagement === 'DOM' && previousItems.length === 0) {\n    newHighlightedValue = moveHighlight(null, 'reset', context);\n  }\n\n  // exclude selected values that are no longer in the items list\n  const selectedValues = state.selectedValues ?? [];\n  const newSelectedValues = selectedValues.filter(selectedValue => items.some(item => itemComparer(item, selectedValue)));\n  return {\n    ...state,\n    highlightedValue: newHighlightedValue,\n    selectedValues: newSelectedValues\n  };\n}\nfunction handleResetHighlight(state, context) {\n  return {\n    ...state,\n    highlightedValue: moveHighlight(null, 'reset', context)\n  };\n}\nfunction handleHighlightLast(state, context) {\n  return {\n    ...state,\n    highlightedValue: moveHighlight(null, 'end', context)\n  };\n}\nfunction handleClearSelection(state, context) {\n  return {\n    ...state,\n    selectedValues: [],\n    highlightedValue: moveHighlight(null, 'reset', context)\n  };\n}\nexport function listReducer(state, action) {\n  const {\n    type,\n    context\n  } = action;\n  switch (type) {\n    case ListActionTypes.keyDown:\n      return handleKeyDown(action.key, state, context);\n    case ListActionTypes.itemClick:\n      return handleItemSelection(action.item, state, context);\n    case ListActionTypes.blur:\n      return handleBlur(state, context);\n    case ListActionTypes.textNavigation:\n      return handleTextNavigation(state, action.searchString, context);\n    case ListActionTypes.itemsChange:\n      return handleItemsChange(action.items, action.previousItems, state, context);\n    case ListActionTypes.resetHighlight:\n      return handleResetHighlight(state, context);\n    case ListActionTypes.highlightLast:\n      return handleHighlightLast(state, context);\n    case ListActionTypes.clearSelection:\n      return handleClearSelection(state, context);\n    default:\n      return state;\n  }\n}","map":{"version":3,"names":["ListActionTypes","findValidItemToHighlight","currentIndex","lookupDirection","items","includeDisabledItems","isItemDisabled","wrapAround","length","every","item","itemIndex","nextFocus","nextFocusDisabled","moveHighlight","previouslyHighlightedValue","offset","context","disableListWrap","disabledItemsFocusable","itemComparer","focusManagement","defaultHighlightedIndex","maxIndex","previouslyHighlightedIndex","findIndex","nextIndexCandidate","newIndex","Math","abs","nextIndex","toggleSelection","selectedValues","selectionMode","some","sv","filter","handleItemSelection","state","i","newSelectedValues","highlightedValue","handleKeyDown","key","previouslySelectedValue","orientation","pageSize","handleBlur","textCriteriaMatches","searchString","stringifyItem","text","trim","toLowerCase","startsWith","handleTextNavigation","getItemAsString","startWithCurrentItem","nextItem","index","indexOf","handleItemsChange","previousItems","newHighlightedValue","find","selectedValue","handleResetHighlight","handleHighlightLast","handleClearSelection","listReducer","action","type","keyDown","itemClick","blur","textNavigation","itemsChange","resetHighlight","highlightLast","clearSelection"],"sources":["/Users/jayx/Desktop/my-personal-website/node_modules/@mui/base/useList/listReducer.js"],"sourcesContent":["import { ListActionTypes } from './listActions.types';\n/**\n * Looks up the next valid item to highlight within the list.\n *\n * @param currentIndex The index of the start of the search.\n * @param lookupDirection Whether to look for the next or previous item.\n * @param items The array of items to search.\n * @param includeDisabledItems Whether to include disabled items in the search.\n * @param isItemDisabled A function that determines whether an item is disabled.\n * @param wrapAround Whether to wrap around the list when searching.\n * @returns The index of the next valid item to highlight or -1 if no valid item is found.\n */\nfunction findValidItemToHighlight(currentIndex, lookupDirection, items, includeDisabledItems, isItemDisabled, wrapAround) {\n  if (items.length === 0 || !includeDisabledItems && items.every((item, itemIndex) => isItemDisabled(item, itemIndex))) {\n    return -1;\n  }\n  let nextFocus = currentIndex;\n  for (;;) {\n    // No valid items found\n    if (!wrapAround && lookupDirection === 'next' && nextFocus === items.length || !wrapAround && lookupDirection === 'previous' && nextFocus === -1) {\n      return -1;\n    }\n    const nextFocusDisabled = includeDisabledItems ? false : isItemDisabled(items[nextFocus], nextFocus);\n    if (nextFocusDisabled) {\n      nextFocus += lookupDirection === 'next' ? 1 : -1;\n      if (wrapAround) {\n        nextFocus = (nextFocus + items.length) % items.length;\n      }\n    } else {\n      return nextFocus;\n    }\n  }\n}\n\n/**\n * Gets the next item to highlight based on the current highlighted item and the search direction.\n *\n * @param previouslyHighlightedValue The item from which to start the search for the next candidate.\n * @param offset The offset from the previously highlighted item to search for the next candidate or a special named value ('reset', 'start', 'end').\n * @param context The list action context.\n *\n * @returns The next item to highlight or null if no item is valid.\n */\nexport function moveHighlight(previouslyHighlightedValue, offset, context) {\n  const {\n    items,\n    isItemDisabled,\n    disableListWrap,\n    disabledItemsFocusable,\n    itemComparer,\n    focusManagement\n  } = context;\n\n  // TODO: make this configurable\n  // The always should be an item highlighted when focus is managed by the DOM\n  // so that it's accessible by the `tab` key.\n  const defaultHighlightedIndex = focusManagement === 'DOM' ? 0 : -1;\n  const maxIndex = items.length - 1;\n  const previouslyHighlightedIndex = previouslyHighlightedValue == null ? -1 : items.findIndex(item => itemComparer(item, previouslyHighlightedValue));\n  let nextIndexCandidate;\n  let lookupDirection;\n  let wrapAround = !disableListWrap;\n  switch (offset) {\n    case 'reset':\n      if (defaultHighlightedIndex === -1) {\n        return null;\n      }\n      nextIndexCandidate = 0;\n      lookupDirection = 'next';\n      wrapAround = false;\n      break;\n    case 'start':\n      nextIndexCandidate = 0;\n      lookupDirection = 'next';\n      wrapAround = false;\n      break;\n    case 'end':\n      nextIndexCandidate = maxIndex;\n      lookupDirection = 'previous';\n      wrapAround = false;\n      break;\n    default:\n      {\n        const newIndex = previouslyHighlightedIndex + offset;\n        if (newIndex < 0) {\n          if (!wrapAround && previouslyHighlightedIndex !== -1 || Math.abs(offset) > 1) {\n            nextIndexCandidate = 0;\n            lookupDirection = 'next';\n          } else {\n            nextIndexCandidate = maxIndex;\n            lookupDirection = 'previous';\n          }\n        } else if (newIndex > maxIndex) {\n          if (!wrapAround || Math.abs(offset) > 1) {\n            nextIndexCandidate = maxIndex;\n            lookupDirection = 'previous';\n          } else {\n            nextIndexCandidate = 0;\n            lookupDirection = 'next';\n          }\n        } else {\n          nextIndexCandidate = newIndex;\n          lookupDirection = offset >= 0 ? 'next' : 'previous';\n        }\n      }\n  }\n  const nextIndex = findValidItemToHighlight(nextIndexCandidate, lookupDirection, items, disabledItemsFocusable, isItemDisabled, wrapAround);\n\n  // If there are no valid items to highlight, return the previously highlighted item (if it's still valid).\n  if (nextIndex === -1 && previouslyHighlightedValue !== null && !isItemDisabled(previouslyHighlightedValue, previouslyHighlightedIndex)) {\n    return previouslyHighlightedValue;\n  }\n  return items[nextIndex] ?? null;\n}\n\n/**\n * Toggles the selection of an item.\n *\n * @param item Item to toggle.\n * @param selectedValues Already selected items.\n * @param selectionMode The number of items that can be simultanously selected.\n * @param itemComparer A custom item comparer function.\n *\n * @returns The new array of selected items.\n */\nexport function toggleSelection(item, selectedValues, selectionMode, itemComparer) {\n  if (selectionMode === 'none') {\n    return [];\n  }\n  if (selectionMode === 'single') {\n    // if the item to select has already been selected, return the original array\n    if (itemComparer(selectedValues[0], item)) {\n      return selectedValues;\n    }\n    return [item];\n  }\n\n  // The toggled item is selected; remove it from the selection.\n  if (selectedValues.some(sv => itemComparer(sv, item))) {\n    return selectedValues.filter(sv => !itemComparer(sv, item));\n  }\n\n  // The toggled item is not selected - add it to the selection.\n  return [...selectedValues, item];\n}\n\n/**\n * Handles item selection in a list.\n *\n * @param item - The item to be selected.\n * @param state - The current state of the list.\n * @param context - The context of the list action.\n * @returns The new state of the list after the item has been selected, or the original state if the item is disabled.\n */\nexport function handleItemSelection(item, state, context) {\n  const {\n    itemComparer,\n    isItemDisabled,\n    selectionMode,\n    items\n  } = context;\n  const {\n    selectedValues\n  } = state;\n  const itemIndex = items.findIndex(i => itemComparer(item, i));\n  if (isItemDisabled(item, itemIndex)) {\n    return state;\n  }\n\n  // if the item is already selected, remove it from the selection, otherwise add it\n  const newSelectedValues = toggleSelection(item, selectedValues, selectionMode, itemComparer);\n  return {\n    ...state,\n    selectedValues: newSelectedValues,\n    highlightedValue: item\n  };\n}\nfunction handleKeyDown(key, state, context) {\n  const previouslySelectedValue = state.highlightedValue;\n  const {\n    orientation,\n    pageSize\n  } = context;\n  switch (key) {\n    case 'Home':\n      return {\n        ...state,\n        highlightedValue: moveHighlight(previouslySelectedValue, 'start', context)\n      };\n    case 'End':\n      return {\n        ...state,\n        highlightedValue: moveHighlight(previouslySelectedValue, 'end', context)\n      };\n    case 'PageUp':\n      return {\n        ...state,\n        highlightedValue: moveHighlight(previouslySelectedValue, -pageSize, context)\n      };\n    case 'PageDown':\n      return {\n        ...state,\n        highlightedValue: moveHighlight(previouslySelectedValue, pageSize, context)\n      };\n    case 'ArrowUp':\n      if (orientation !== 'vertical') {\n        break;\n      }\n      return {\n        ...state,\n        highlightedValue: moveHighlight(previouslySelectedValue, -1, context)\n      };\n    case 'ArrowDown':\n      if (orientation !== 'vertical') {\n        break;\n      }\n      return {\n        ...state,\n        highlightedValue: moveHighlight(previouslySelectedValue, 1, context)\n      };\n    case 'ArrowLeft':\n      {\n        if (orientation === 'vertical') {\n          break;\n        }\n        const offset = orientation === 'horizontal-ltr' ? -1 : 1;\n        return {\n          ...state,\n          highlightedValue: moveHighlight(previouslySelectedValue, offset, context)\n        };\n      }\n    case 'ArrowRight':\n      {\n        if (orientation === 'vertical') {\n          break;\n        }\n        const offset = orientation === 'horizontal-ltr' ? 1 : -1;\n        return {\n          ...state,\n          highlightedValue: moveHighlight(previouslySelectedValue, offset, context)\n        };\n      }\n    case 'Enter':\n    case ' ':\n      if (state.highlightedValue === null) {\n        return state;\n      }\n      return handleItemSelection(state.highlightedValue, state, context);\n    default:\n      break;\n  }\n  return state;\n}\nfunction handleBlur(state, context) {\n  if (context.focusManagement === 'DOM') {\n    return state;\n  }\n  return {\n    ...state,\n    highlightedValue: null\n  };\n}\nfunction textCriteriaMatches(nextFocus, searchString, stringifyItem) {\n  const text = stringifyItem(nextFocus)?.trim().toLowerCase();\n  if (!text || text.length === 0) {\n    // Make item not navigable if stringification fails or results in empty string.\n    return false;\n  }\n  return text.startsWith(searchString);\n}\nfunction handleTextNavigation(state, searchString, context) {\n  const {\n    items,\n    isItemDisabled,\n    disabledItemsFocusable,\n    getItemAsString\n  } = context;\n  const startWithCurrentItem = searchString.length > 1;\n  let nextItem = startWithCurrentItem ? state.highlightedValue : moveHighlight(state.highlightedValue, 1, context);\n  for (let index = 0; index < items.length; index += 1) {\n    // Return un-mutated state if looped back to the currently highlighted value\n    if (!nextItem || !startWithCurrentItem && state.highlightedValue === nextItem) {\n      return state;\n    }\n    if (textCriteriaMatches(nextItem, searchString, getItemAsString) && (!isItemDisabled(nextItem, items.indexOf(nextItem)) || disabledItemsFocusable)) {\n      // The nextItem is the element to be highlighted\n      return {\n        ...state,\n        highlightedValue: nextItem\n      };\n    }\n    // Move to the next element.\n    nextItem = moveHighlight(nextItem, 1, context);\n  }\n\n  // No item matches the text search criteria\n  return state;\n}\nfunction handleItemsChange(items, previousItems, state, context) {\n  const {\n    itemComparer,\n    focusManagement\n  } = context;\n  let newHighlightedValue = null;\n  if (state.highlightedValue != null) {\n    newHighlightedValue = items.find(item => itemComparer(item, state.highlightedValue)) ?? null;\n  } else if (focusManagement === 'DOM' && previousItems.length === 0) {\n    newHighlightedValue = moveHighlight(null, 'reset', context);\n  }\n\n  // exclude selected values that are no longer in the items list\n  const selectedValues = state.selectedValues ?? [];\n  const newSelectedValues = selectedValues.filter(selectedValue => items.some(item => itemComparer(item, selectedValue)));\n  return {\n    ...state,\n    highlightedValue: newHighlightedValue,\n    selectedValues: newSelectedValues\n  };\n}\nfunction handleResetHighlight(state, context) {\n  return {\n    ...state,\n    highlightedValue: moveHighlight(null, 'reset', context)\n  };\n}\nfunction handleHighlightLast(state, context) {\n  return {\n    ...state,\n    highlightedValue: moveHighlight(null, 'end', context)\n  };\n}\nfunction handleClearSelection(state, context) {\n  return {\n    ...state,\n    selectedValues: [],\n    highlightedValue: moveHighlight(null, 'reset', context)\n  };\n}\nexport function listReducer(state, action) {\n  const {\n    type,\n    context\n  } = action;\n  switch (type) {\n    case ListActionTypes.keyDown:\n      return handleKeyDown(action.key, state, context);\n    case ListActionTypes.itemClick:\n      return handleItemSelection(action.item, state, context);\n    case ListActionTypes.blur:\n      return handleBlur(state, context);\n    case ListActionTypes.textNavigation:\n      return handleTextNavigation(state, action.searchString, context);\n    case ListActionTypes.itemsChange:\n      return handleItemsChange(action.items, action.previousItems, state, context);\n    case ListActionTypes.resetHighlight:\n      return handleResetHighlight(state, context);\n    case ListActionTypes.highlightLast:\n      return handleHighlightLast(state, context);\n    case ListActionTypes.clearSelection:\n      return handleClearSelection(state, context);\n    default:\n      return state;\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}